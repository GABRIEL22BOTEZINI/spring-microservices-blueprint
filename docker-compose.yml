services:
  account-service-db:
    image: postgres:15-alpine
    container_name: account-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: account-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    volumes:
      - account-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  account-service-app:
    build:
      context: .
      dockerfile: account-service/Dockerfile
    image: account-service-app:latest
    container_name: account-service-app
    restart: unless-stopped
    environment:
      DB_URL: jdbc:postgresql://account-service-db:5432/account-service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8088:8088"
      - "5005:5005"
    depends_on:
      account-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      fluentd:
        condition: service_started
    logging:
      driver: "fluentd"
      options:
        fluentd-address: host.docker.internal:24224
        tag: '{{.Name}}'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  product-service-db:
    image: postgres:15-alpine
    container_name: product-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: product-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5434:5432"
    volumes:
      - product-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service-app:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    image: product-service-app:latest
    container_name: product-service-app
    restart: unless-stopped
    environment:
      DB_URL: jdbc:postgresql://product-service-db:5432/product-service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8089:8089"
      - "5006:5006"
    depends_on:
      product-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      fluentd:
        condition: service_started
    logging:
      driver: "fluentd"
      options:
        fluentd-address: host.docker.internal:24224
        tag: '{{.Name}}'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  fluentd:
    build: ./fluentd
    container_name: fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/conf:/fluentd/etc
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=elastic
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:elastic -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "stat", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  account-postgres-data:
  product-postgres-data:
  esdata: